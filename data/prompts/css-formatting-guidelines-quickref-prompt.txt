I have a documentation page (the Drupal "Css Formatting Guidelines" standards page) that describes rules or conventions. I want to convert that page into a clear section in AGENTS.md so that an AI coding agent can read and enforce those conventions.

Please do the following:

Read the source content I will provide.

Extract the key conventions / rules / guidelines (in bullet or list form).

Write a section suitable for AGENTS.md, with a heading like ## Css Formatting Guidelines, followed by the rules in a concise, machine-friendly form.

Ensure the section is self-contained (i.e. an agent reading only AGENTS.md should understand the rules).

Use consistent formatting across sections (e.g. heading levels, bullet style).

## Source Content:
# Bullet Points for css-formatting-guidelines.md


## CSS formatting guidelines

## On this page
- [Whitespace](/docs/develop/standards/css/css-formatting-guidelines#s-whitespace)
- [Indentation](/docs/develop/standards/css/css-formatting-guidelines#s-indentation)
- [Blank lines](/docs/develop/standards/css/css-formatting-guidelines#s-blank-lines)
- [Line endings](/docs/develop/standards/css/css-formatting-guidelines#s-line-endings)
- [Comments](/docs/develop/standards/css/css-formatting-guidelines#s-comments)
- [File comments](/docs/develop/standards/css/css-formatting-guidelines#s-file-comments)
- [Single line comments describing a ruleset](/docs/develop/standards/css/css-formatting-guidelines#s-single-line-comments-describing-a-ruleset)
- [Multi-line comments describing a ruleset](/docs/develop/standards/css/css-formatting-guidelines#s-multi-line-comments-describing-a-ruleset)
- [Multi-line comments inside a ruleset](/docs/develop/standards/css/css-formatting-guidelines#s-multi-line-comments-inside-a-ruleset)
- [Single-line comments](/docs/develop/standards/css/css-formatting-guidelines#s-single-line-comments)
- [Properties where browsers do not have or support CSS logical properties](/docs/develop/standards/css/css-formatting-guidelines#s-properties-where-browsers-do-not-have-or-support-css-logical-properties)
- [Rulesets](/docs/develop/standards/css/css-formatting-guidelines#s-rulesets)
- [Properties](/docs/develop/standards/css/css-formatting-guidelines#s-properties)
- [Declaration order](/docs/develop/standards/css/css-formatting-guidelines#s-declaration-order)

## [CSS](/docs/develop/standards/css)
- [CSS coding standards](/docs/develop/standards/css/css-coding-standards)
- [CSS formatting guidelines](/docs/develop/standards/css/css-formatting-guidelines)
- [CSScomb settings for Drupal (CSS formatting and sort tool)](/docs/develop/standards/css/csscomb-settings-for-drupal-css-formatting-and-sort-tool)
- [CSS architecture (for Drupal 9)](/docs/develop/standards/css/css-architecture-for-drupal-9)
- [CSS file organization (for Drupal 9)](/docs/develop/standards/css/css-file-organization)
- [What to look for when reviewing CSS](/docs/develop/standards/css/what-to-look-for-when-reviewing-css)

## CSS formatting guidelines
- Last [updated](/node/1887862/discuss) on
- 19 January 2025
- Note: Changes to Drupal coding standards are proposed and discussed in issues in the [Coding Standards project](/project/coding_standards).

## [](#s-whitespace "Permalink to this headline")Whitespace

## [](#s-indentation "Permalink to this headline")Indentation
- Use 2 spaces for each level of indentation, the same standard as Drupal’s PHP and JavaScript code.
- Declarations (property/value pairs) should be indented one level relative to their selector.
- Rulesets within a media query should be indented one level relative to the media statement.
- Comments should maintain the indentation of their declaration or ruleset.
- `.tabs__tab {
- display: none;
- margin-block-end: calc(-1 * var(--tabs-border-width));
- &.is-active {
- display: flex;

## [](#s-blank-lines "Permalink to this headline")Blank lines
- In general, separate each ruleset by a blank line when using PostCSS.
- If a ruleset has a preceding Doxygen-style or single-line-style comment that describes it, place a blank line before the comment.
- If two rulesets have no interleaving blank line, they must be logically related. If they are not logically related to each other, add a blank line and a comment describing the second ruleset.
- -tabs-height: var(--sp3);
- -tabs-padding-inline: var(--sp1-5);
- -tabs-active-border-size: 6px;
- -tabs-highlight-color: var(--color--primary-50); /* Minimum 3:1 contrast ratio against --tabs-background-color and --tabs-background-color-hover. */
- display: flex;
- flex-direction: column;
- I'm a Doxygen-style comment. Woohoo!
- .tabs__tab {
- display: none;
- margin-block-end: calc(-1 * var(--tabs-border-width));
- /* Show tabs when JavaScript disabled. */
- @nest html:not(.js) & {
- display: flex;

## [](#s-line-endings "Permalink to this headline")Line endings
- There MUST NOT be any whitespace (spaces or tabs) at the end of lines.
- All text files should end with a single blank line.
- Files should be formatted with Unix line endings (a newline character, denoted as `\n` or `LF`), which is also the default in Mac OS X.
- Tip: configure your editor to “show invisibles”. This will allow you to eliminate end-of-line whitespace, eliminate unintended blank-line whitespace, and avoid polluting commits.
- Drupal 8 and above includes an [EditorConfig](http://editorconfig.org/) file in [its root directory](https://git.drupalcode.org/project/drupal/-/tree/11.x?ref_type=heads) to help maintain these whitespace conventions.

## [](#s-comments "Permalink to this headline")Comments
- Well commented code is extremely important. Take time to describe components, how they work, their limitations, and the way they are constructed. Don't leave others guessing as to the purpose of uncommon or non-obvious code.
- To stay consistent with the rest of Drupal's code base, we borrow some of the CSS comment styles from the [Doxygen and comment formatting conventions](https://www.drupal.org/docs/develop/standards/php/api-documentation-and-comment-standards) for PHP files.

## [](#s-file-comments "Permalink to this headline")File comments
- Each file should start with a comment describing what the file does. Note that a blank line should follow a file comment. And keep line-lengths to 80 columns, when possible. For more information, see the [PHP file comment standards](https://www.drupal.org/docs/develop/standards/php/api-documentation-and-comment-standards).

## [](#s-single-line-comments-describing-a-ruleset "Permalink to this headline")Single line comments describing a ruleset
- Short comments describing a ruleset can be kept to one line.

## [](#s-multi-line-comments-describing-a-ruleset "Permalink to this headline")Multi-line comments describing a ruleset
- When describing a ruleset or set of rulesets, any comment that requires 2 or more lines (wrapped to 80 characters) must follow the Doxygen comment style (also called a “docblock”).

## [](#s-multi-line-comments-inside-a-ruleset "Permalink to this headline")Multi-line comments inside a ruleset
- Within a ruleset, multi-line comments are preceded with a `/*` and terminated by a `*/`. Text is intended to maintain the text’s left alignment.

## [](#s-single-line-comments "Permalink to this headline")Single-line comments
- When describing a property or ruleset, any comment that can be written inside the 80 character line length limit can use a simple CSS comment style.
- Example of all comment styles:
- Example CSS file to demonstrate all variations of CSS comments. This file uses
- modern syntax including nesting, and `:dir()` pseudo-class that PostCSS
- transpiles into browser-readable CSS.
- .component {
- position: relative; /* Anchor pseudo-element. */
- z-index: 502; /* Appear above toolbar. */
- /* This is a multiline comment WITHIN a ruleset. It describes the next rule
- when there is not enough space on the same line as the rule. We try to
- make it not go very far over 80 characters. We want to make it very verbose
- to help out future developers. */
- visibility: hidden;
- transform: translateX(50%); /* LTR */
- border-radius: var(--border-radius);
- will-change: transform; /* Needed for Safari 16. */
- This is a multiline comment that describes an entire ruleset (even if
- nested). We try to make it not go very far over 80 characters. We want to
- make it very verbose to help out future developers.
- &[aria-expanded="true"] {
- visibility: visible;
- /* Short comment outside ruleset. */
- &::marker {
- display: none;
- &:dir(rtl) {
- transform: translateX(-50%);

## [](#s-properties-where-browsers-do-not-have-or-support-css-logical-properties "Permalink to this headline")Properties where browsers do not have or support CSS logical properties
- Certain properties do not have a “logical properties” equivalent (such as `transform`). For these direction specific rules, add a `/* LTR */` comment on the same line preceded by a single space. Follow with an additional ruleset (or nested ruleset if using PostCSS) containing the inverse property/values.
- `.my-component {
- transform: translateX(20px); /* LTR */
- [dir="rtl"] .my-component {
- transform: translateX(-20px);

## [](#s-rulesets "Permalink to this headline")Rulesets
- Use one selector per line when a ruleset has a group of selectors separated by commas.
- When possible, consider using functional pseudo-classes like  `:is()`, `:not()or` `:where()` that allow combining of selectors.
- Include one declaration per line in a declaration block.
- Example of one selector per line.
- .my-component,
- .my-other-component,
- .yet-another-component {
- background-color: #cccccc;
- Example of the :is() pseudo-class.
- :is(.my-component, .my-other-component, .yet-another-component) {
- background-color: #cccccc;

## [](#s-properties "Permalink to this headline")Properties
- In a declaration, the property name should be immediately followed by a colon, then a single space, and then the property’s value.
- Include a semicolon at the end of all declarations.
- For property values that require quotes, use double quotes instead of single quotes, e.g. font-family: "Arial Black", Arial, sans-serif; and content: " ";.
- Default to rem units, unless it creates an undesired effect.
- Note that if you are using PostCSS, this is automatic via the PostCSS PxToRem plugin.
- Quote attribute values in selectors, e.g. input\[type="checkbox"\].
- Where allowed, avoid specifying units for zero-values, e.g. use `margin: 0;` instead of `margin: 0px;`.
- Include a space after each comma in comma-separated property or function values.
- Do not use spaces around the parentheses in a function, e.g. color: rgba(0, 0, 0, 0.8);
- Use lower case function names, correct: color: rgba(0, 0, 0, 0.8);

## [](#s-declaration-order "Permalink to this headline")Declaration order
- The declarations in a ruleset should be ordered so that the purpose of the declaration block is most obvious. Clarity should be the guiding principle.
- 1.  Positioning properties include: `position`, `float`, `clear`, `inset`, `top`, `right`, `bottom`, `left`, `direction`, and `z-index` plus logical properties like `block-start`, `block-end`, `inline-start` and `inline-end`.
- 2.  Box model properties include:
- 1.  display
- 2.  sizing (like block-size or inline-size as logical properties, and width and height and the (max|min) variation or each of them)
- 3.  Margins and the logical property equivalents, plus their various longhand forms (margin-block, margin-top, margin-inline-end…)
- 4.  Paddings and the logical property equivalents,  plus their various longhand forms (padding-block, padding-top, padding-inline-end…)
- 5.  Borders and the logical property equivalents,  plus their various longhand forms.
- 6.  box-sizing
- 3.  Other declarations.
- Within each of the above groups, properties can be grouped alphabetically or grouped with like properties next to each other, e.g. putting font and text properties next to each other. Drupal’s coding standards are purposefully vague here because there is no consensus on this issue (as of 2013), but we respect each other’s abilities and preferences.
- If not automatically added by autoprefixer (which is part of the PostCSS build process), vendor prefixed properties should be directly before their non-prefixed version. This allows the official version of the property to override any inconsistencies in the vendor-prefixed versions once those browsers implement the official property. If browser bugs or cross-browser issues necessitate any deviation from this ordering, it should be clearly documented.
- Again, the order of properties is meant to reinforce the purpose of the ruleset. As such, it is much more important to add comments to the ruleset than to worry about property ordering.
- The text of this guideline was originally based on the [*Principles of writing consistent, idiomatic CSS*](https://github.com/necolas/idiomatic-css) by Nicolas Gallagher.

## Help improve this page
- *Page status:** No known problems
- *You can:**
- Log in, click [Edit](/node/1887862/edit), and edit this page
- Log in, click [Discuss](/node/1887862/discuss), update the Page status value, and suggest an improvement
- Log in and [create a Documentation issue](/node/add/project-issue/documentation?title=Suggestion%20for%3A%20%281887862%29%20CSS%20formatting%20guidelines) with your suggestion

## Requirements:

### Format & Structure:
1. **Use AGENTS.md format** - Create a section suitable for AGENTS.md
2. **Use bullet points** - Keep it scannable and concise
3. **Structure logically** - Group related guidelines together
4. **Use clear headers** - Make it easy to navigate

### Content Focus:
5. **Extract key conventions/rules** - Focus on the most important coding standards and conventions
6. **Be concise** - Avoid lengthy explanations, focus on actionable guidelines
7. **Prioritize AI-relevant content** - Rules that AI coding agents should follow and enforce
8. **Minimize token usage** - Use bullet points only, no examples or lengthy explanations

### AI Optimization:
9. **Make it actionable** - Each point should be something an AI can implement or enforce
10. **Use consistent formatting** - Standardize the format for easy parsing
11. **Focus on conventions** - Coding standards, naming conventions, best practices, rules
12. **Self-contained** - An agent reading only this section should understand the rules

### Output Format:
Generate an AGENTS.md section in this exact format:

## Css Formatting Guidelines

### Rules
- [Essential rule/convention 1]
- [Essential rule/convention 2]
- [Essential rule/convention 3]

Keep the output concise and focused on the most important rules and conventions that AI coding agents need to know and enforce. Use only bullet points to minimize token usage and costs.