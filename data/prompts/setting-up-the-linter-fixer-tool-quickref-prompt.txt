I have a documentation page (the Drupal "Setting Up The Linter Fixer Tool" standards page) that describes rules or conventions. I want to convert that page into a clear section in AGENTS.md so that an AI coding agent can read and enforce those conventions.

Please do the following:

Read the source content I will provide.

Extract the key conventions / rules / guidelines (in bullet or list form).

Write a section suitable for AGENTS.md, with a heading like ## Setting Up The Linter Fixer Tool, followed by the rules in a concise, machine-friendly form.

Ensure the section is self-contained (i.e. an agent reading only AGENTS.md should understand the rules).

Use consistent formatting across sections (e.g. heading levels, bullet style).

## Source Content:
# Bullet Points for setting-up-the-linter-fixer-tool.md


## Setting up the linter-fixer tool

## On this page
- [Tools overview](/docs/develop/standards/javascript-coding-standards/setting-up-the-linter-fixer-tool#s-tools-overview)
- [Preparing the environment](/docs/develop/standards/javascript-coding-standards/setting-up-the-linter-fixer-tool#s-preparing-the-environment)
- [Installing dependencies](/docs/develop/standards/javascript-coding-standards/setting-up-the-linter-fixer-tool#s-installing-dependencies)
- [Running checks & fixes](/docs/develop/standards/javascript-coding-standards/setting-up-the-linter-fixer-tool#s-running-checks-fixes)
- [Special cases](/docs/develop/standards/javascript-coding-standards/setting-up-the-linter-fixer-tool#s-special-cases)

## [JavaScript coding standards](/docs/develop/standards/javascript-coding-standards)
- [JavaScript coding standards](/docs/develop/standards/javascript-coding-standards/javascript-coding-standards)
- [JavaScript best practices](/docs/develop/standards/javascript/javascript-best-practices)
- [ESLint settings](/docs/develop/standards/javascript-coding-standards/setting-up-the-linter-fixer-tool)
- [JavaScript API documentation and comment standards](/docs/develop/standards/javascript-coding-standards/javascript-api-documentation-and-comment-standards)
- [jQuery coding standards](/docs/develop/standards/javascript/jquery-coding-standards)

## Setting up the linter-fixer tool
- Last [updated](/node/1955232/discuss) on
- 5 August 2025
- Understanding the purpose and nature of Drupal's coding standards for JavaScript from the [previous pages](/docs/develop/standards/javascript-coding-standards/javascript-coding-standards) represents the theory. Now, let's continue with their practical usage in everyday work. This page describes some basic methods of setting up developer aid tools utilizing these rulesets.

## [](#s-tools-overview "Permalink to this headline")Tools overview
- *ESLint* is the most popular linter utility for JavaScript and EcmaScript-based (hence the name) languages. It analyzes static code to catch syntax issues and enforce coding best practices. (It is loosely comparable to PHPStan on the backend side, but not as type-aware.)
- On the other hand, *Prettier* is a separate tool: an opinionated code formatter that can be integrated into ESLint via plugins. However, unlike ESLint, it doesn’t validate logic or best practices. (It only rewrites code into a consistent format.)
- When working on JavaScript source code for Drupal, these 2 tools, ESLint and Prettier, must be installed on your project's codebase; using a package manager is the easiest way to get them. Although multiple competitor package manager utilities are available in the JavaScript/ECMAScript universe (*NPM* and *Yarn* are the two most popular), the Drupal community has [chosen](https://www.drupal.org/node/2996785/revisions/13574092/view#s-install-pre-requisites:~:text=we%20use%20yarn%20for%20managing%20dependencies) the latter as the recommended one for many reasons. (Evidence is the [presence](https://git.drupalcode.org/project/drupal/-/blob/11.2.2/core/yarn.lock) of the `yarn.lock` file and the [lack](https://git.drupalcode.org/search?search=package-lock.json&nav_source=navbar&project_id=59858&group_id=2&search_code=true&repository_ref=11.2.2) of `package-lock.json` file.) So this guide will also demonstrate Yarn commands.
- [![Screenshot](/files/drupal-core-managaes-its-frontend-dependencies-with-yarn.png)](/files/drupal-core-managaes-its-frontend-dependencies-with-yarn.png "Open in original size")
- All three development tools mentioned till now ([Yarn](https://github.com/yarnpkg/berry/blob/master/package.json#L76), [ESLint](https://github.com/eslint/eslint/blob/main/package.json#L223), and [Prettier](https://github.com/prettier/prettier/blob/main/package.json#L26)) require a Node.js instance to be installed and run on the stack.

## [](#s-preparing-the-environment "Permalink to this headline")Preparing the environment
- The underlying software stack of a Drupal-based website and its file structure can be installed in several different ways. Still, for the sake of simplicity, this guide will follow the generally suggested method: building upon the `drupal/core-recommended` [meta-package](https://github.com/drupal/core-recommended) and running in a containerized local development environment with *DDEV* (see the [docs](/docs/getting-started/installing-drupal/install-drupal-using-ddev-for-local-development)). Following this platform-agnostic approach ensures the broadest reach of audience of our documentation efforts – even if you have to use a different tool as a component of the stack for any reason, you still can grasp the overall idea.
- One of the many benefits DDEV provides is that it already installs the latest version of Node.js on the backend stack without the need to take care of it manually. (Feel free to check by running `$ ddev . node --version` – it should return a value starting with v22.) "Standing on the shoulders of giants" – you've probably heard the saying many times. The great people behind Node.js and Yarn have joined forces to provide a convenient way of having a package manager already available out-of-the-box without manual installation: this is the [Corepack](https://github.com/nodejs/corepack#readme) initiative.
- The containerization tool DDEV offers this *Corepack* component by default, built into the web container (which runs your website). You just need to enable it:
- 1.  Find the "corepack" term in your `.ddev/config.yaml` file
- 2.  Uncomment it, set its value to "true"
- 3.  Restart your stack: `$ ddev restart`
- 4.  Ensure you have its latest version installed: `$ ddev yarn set version stable`
- 5.  Finally, your package manager should be up and running: `$ ddev yarn --version` responding "4.9.x" or similar version number

## [](#s-installing-dependencies "Permalink to this headline")Installing dependencies
- A package manager is only a program alone; now we need the list of required packages to feed it to install. Drupal Core is shipped with its own `package.json` file describing all the frontend-related external dependencies. Roughly simplified, similarly to the `composer.json` file in the root directory of your project, which lists the backend-related packages, but with the significant difference that Node.js' `package.json` file sits two levels deeper, in the `web/core/` directory instead.
- 1.  Stand into this lower directory: `$ cd web/core`
- 2.  Start installing all the dependencies listed in the `package.json` file: `$ ddev yarn install`
- 3.  A new `web/core/node_modules/` directory should appear in your file structure (it is already ignored in Git)
- Within this, the `web/core/node_modules/.bin/` directory should contain two executable files: `eslint` and `prettier` (symlinks, to be precise).
- 4.  Now you can check if they run normally by asking their version number and comparing to these expected values:
- `$ ddev yarn eslint --version` → "8.57.x" or similar
- `$ ddev yarn prettier --version` → "3.5.x" or similar
- One more thing to see: currently, the only single `node_modules/` directory containing all these external dependencies exists down there in `web/core/`, thus it is only relevant for Drupal Core. However, we also want to lint the JavaScript code of contrib and custom modules and themes as well, living in different locations of the codebase. To make the content of `node_modules/` available from other places as well, create a symlink from the topmost project root pointing to its content. This line chains together three commands: jumping up to the project root, creating the symlink, then returning to `web/core/` where we started from.
- $ cd ../../ && ln -s web/core/node\_modules && cd web/core

## [](#s-running-checks-fixes "Permalink to this headline")Running checks & fixes
- Having everything prepared, now we are ready to run the linting process to check any JavaScript file existing in our project codebase. The syntax of invoking ESLint is `$ ddev yarn eslint {{../relative-path/to-the/file}}`. If you also want ESLint to modify file content where an automatically fixable coding standard violation is detected, plus reformat the style of the entire file too, simply add the "--fix" switch to the command in extra. Some examples:
- Only check (but do not fix) a single file of Drupal Core:
- `$ ddev yarn eslint modules/big_pipe/js/big_pipe.js`
- Check a given file outside of Core (e.g. a contrib theme's):
- `$ ddev yarn eslint ../themes/contrib/gin/js/init.js`
- Check & fix not a single file only, but all JS files within an entire directory of our custom code:
- `$ ddev yarn eslint --fix ../modules/custom/my_module/js`
- Here's an example output of such a command:
- [![Screenshot of CLI](/files/running-eslint-on-ddev-for-a-javascript-file-of-drupal-core.png)](/files/running-eslint-on-ddev-for-a-javascript-file-of-drupal-core.png "Open in original size")

## [](#s-special-cases "Permalink to this headline")Special cases
- Some rules need to be changed for specific modules (if they use a third party library and they need to use a new global variable), in that case the module can create it's own `.eslintrc.json` turning some rules on or off and adding global variables they require. When ESLint runs, all the configuration files present in the directory tree are merged together: see [Configuration Cascading and Hierarchy](https://eslint.org/docs/latest/use/configure/configuration-files#cascading-and-hierarchy) for more details. For example, the *Google Analytics* module uses third-party code that defines the global ”ga”, which can be allowed by adding the following code to `.eslintrc.json` in the module directory:
- "extends": [
- "globals": {
- *Note:** Changes to Drupal coding standards are proposed and discussed in issues in the *Coding Standards* [project](/project/coding_standards) (also, see the [docs](https://project.pages.drupalcode.org/coding_standards/)).

## Tags
- [Node.js](/taxonomy/term/204552)
- [Yarn](/taxonomy/term/204553)
- [eslint](/taxonomy/term/190105)
- [DDEV](/taxonomy/term/193599)
- [Prettier](/taxonomy/term/204554)
- [Airbnb](/taxonomy/term/204555)

## Help improve this page
- *Page status:** No known problems
- *You can:**
- Log in, click [Edit](/node/1955232/edit), and edit this page
- Log in, click [Discuss](/node/1955232/discuss), update the Page status value, and suggest an improvement
- Log in and [create a Documentation issue](/node/add/project-issue/documentation?title=Suggestion%20for%3A%20%281955232%29%20Setting%20up%20the%20linter-fixer%20tool) with your suggestion

## Requirements:

### Format & Structure:
1. **Use AGENTS.md format** - Create a section suitable for AGENTS.md
2. **Use bullet points** - Keep it scannable and concise
3. **Structure logically** - Group related guidelines together
4. **Use clear headers** - Make it easy to navigate

### Content Focus:
5. **Extract key conventions/rules** - Focus on the most important coding standards and conventions
6. **Be concise** - Avoid lengthy explanations, focus on actionable guidelines
7. **Prioritize AI-relevant content** - Rules that AI coding agents should follow and enforce
8. **Minimize token usage** - Use bullet points only, no examples or lengthy explanations

### AI Optimization:
9. **Make it actionable** - Each point should be something an AI can implement or enforce
10. **Use consistent formatting** - Standardize the format for easy parsing
11. **Focus on conventions** - Coding standards, naming conventions, best practices, rules
12. **Self-contained** - An agent reading only this section should understand the rules

### Output Format:
Generate an AGENTS.md section in this exact format:

## Setting Up The Linter Fixer Tool

### Rules
- [Essential rule/convention 1]
- [Essential rule/convention 2]
- [Essential rule/convention 3]

Keep the output concise and focused on the most important rules and conventions that AI coding agents need to know and enforce. Use only bullet points to minimize token usage and costs.