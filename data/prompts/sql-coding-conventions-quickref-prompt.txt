I have a documentation page (the Drupal "Sql Coding Conventions" standards page) that describes rules or conventions. I want to convert that page into a clear section in AGENTS.md so that an AI coding agent can read and enforce those conventions.

Please do the following:

Read the source content I will provide.

Extract the key conventions / rules / guidelines (in bullet or list form).

Write a section suitable for AGENTS.md, with a heading like ## Sql Coding Conventions, followed by the rules in a concise, machine-friendly form.

Ensure the section is self-contained (i.e. an agent reading only AGENTS.md should understand the rules).

Use consistent formatting across sections (e.g. heading levels, bullet style).

## Source Content:
# Bullet Points for sql-coding-conventions.md


## SQL coding conventions

## On this page
- [Reserved Words](/docs/develop/standards/sql/sql-coding-conventions#reserved-words)
- [Drupal 8 and 9](/docs/develop/standards/sql/sql-coding-conventions#reserved-words-drupal-8)
- [Drupal 7](/docs/develop/standards/sql/sql-coding-conventions#reserved-words-drupal-7)
- [Capitalization and user-supplied data](/docs/develop/standards/sql/sql-coding-conventions#formatting)
- [Naming](/docs/develop/standards/sql/sql-coding-conventions#naming)
- [Configure your Database server for standard compliance](/docs/develop/standards/sql/sql-coding-conventions#server)
- [References](/docs/develop/standards/sql/sql-coding-conventions#references)
- [Indentation](/docs/develop/standards/sql/sql-coding-conventions#indentation)

## [SQL](/docs/develop/standards/sql)
- [SQL coding conventions](/docs/develop/standards/sql/sql-coding-conventions)
- [List of SQL reserved words](/docs/develop/coding-standards/list-of-sql-reserved-words)
- [Avoid "SELECT \* FROM ..."](/docs/develop/coding-standards/avoid-select-from)

## SQL coding conventions
- Last [updated](/node/2497/discuss) on
- 24 September 2022
- Note: Changes to Drupal coding standards are proposed and discussed in issues in the [Coding Standards project](/project/coding_standards).

## [](#reserved-words "Permalink to this headline")Reserved Words

## [](#reserved-words-drupal-8 "Permalink to this headline")Drupal 8 and 9
- All identifiers in SQL query should be quoted. Table names are quoted using curly brackets, for example, `{table_name}`. All other identifiers are quoted using square brackets, for example, `[column_name]`.

## [](#reserved-words-drupal-7 "Permalink to this headline")Drupal 7
- Don't use (ANSI) SQL / MySQL / PostgreSQL / MS SQL Server / ... Reserved Words for column and/or table names. Even if this may work with your (MySQL) installation, it may not with others or with other databases. Some references:
- [(ANSI) SQL Reserved Words](/node/141051)
- MySQL Reserved Words: [5.1](http://dev.mysql.com/doc/refman/5.1/en/reserved-words.html), [5.0](http://dev.mysql.com/doc/refman/5.0/en/reserved-words.html), [3.23.x, 4.0, 4.1](http://dev.mysql.com/doc/refman/4.1/en/reserved-words.html)
- [PostgreSQL Reserved Words](http://www.postgresql.org/docs/8.1/static/sql-keywords-appendix.html)
- [Oracle Reserved Words](http://download.oracle.com/docs/cd/B19306_01/server.102/b14200/ap_keywd.htm#i690190) (in particular UID is a problem in our context)
- [MS SQL Server Reserved Words](http://msdn2.microsoft.com/en-us/library/ms189822.aspx)
- [DB2 Reserved Words](http://publib.boulder.ibm.com/infocenter/db2luw/v9/index.jsp?topic=/com.ibm.db2.udb.admin.doc/doc/r0001095.htm)
- Some commonly misused keywords: `TIMESTAMP, TYPE, TYPES, MODULE, DATA, DATE, TIME, ...`
- See also [\[bug\] SQL Reserved Words](http://drupal.org/node/371).

## [](#formatting "Permalink to this headline")Capitalization and user-supplied data
- Make SQL reserved words UPPERCASE. This is not a suggestion. Drupal db abstraction commands will fail if this convention is not followed.
- Make column and constraint names lowercase.
- Enclose each table name with `{}` (this allows Drupal to prefix table names).
- Variable arguments (which are often user-supplied) should be moved out of the query body and passed in as separate parameters to [`db_query()`](http://api.drupal.org/apis/db_query), [`db_query_range()`](http://api.drupal.org/apis/db_query_range), and [`db_query_temporary()`](http://api.drupal.org/apis/db_query_temporary), etc. The query body should instead contain placeholders specifying the type of each argument (`%d|%s|%|%f|%b`). This ensures that the data will be properly escaped and prevents SQL injection attacks.
- Preventing SQL injection is easy; db\_query provides a way to use parametrized queries. Drupal's database functions replace the sprintf-like placeholders with the properly escaped arguments in order of appearance:
- %d - integers
- %f - floats
- %s - strings, enclose in single quotes
- %b - binary data, do not enclose in single quotes
- % - replaced with %
- Read more about [Database Access](/node/101496)
- Literal (constant) arguments can either be included in the query body or handled in the same way as variable arguments.
- Any string literal or %s placeholder must be enclosed by single quotes: `'` . Never use double quotes.
- db_query("INSERT INTO {filters} (format, module, delta, weight) VALUES (%d, 'php', 0, 0)", $format);
- *NOTE: as of Drupal 6.x, table definitions and constraints (e.g. primary keys, unique keys, indexes) should be always handled by the [Schema API](/node/146843), which solves cross-database compatibility concerns automatically.**

## [](#naming "Permalink to this headline")Naming
- Use singular nouns for table names since they describe the entity the table represents. Drupal 6.x mixed singular/plural usage and this convention changed for Drupal 7.x.
- It is a good practice to prefix table names with the module name to prevent possible namespace conflicts.
- Name every constraint (primary, foreign, unique keys) yourself. Otherwise, you'll see funny-looking system-generated names in error messages. This happened with the `moderation_roles` table which initially defined a key without explicit name as `KEY (mid)`. This got mysqldump'ed as `KEY mid (mid)` which resulted in a syntax error as `mid()` is a mysql function (see [\[bug\] mysql --ansi cannot import install database](/node/893)).
- Index names should begin with the name of the table they depend on, eg. `INDEX users_sid_idx`.
- *NOTE: as of Drupal 6.x, table definitions and constraints should be always handled by the Schema API.**

## [](#server "Permalink to this headline")Configure your Database server for standard compliance
- Most Database Servers use extension to standard SQL. However, many of them can be configured to run in a (more) standard compliant mode. Every developer is encouraged to use the mode most standard compliant to avoid sloppy coding and compatibility problems.
- Enable [ANSI](http://dev.mysql.com/doc/refman/5.0/en/server-sql-mode.html#id2702339) and [Strict](http://dev.mysql.com/doc/refman/5.0/en/server-sql-mode.html#id2702074) Mode
- Please help growing this list for other database servers!*

## [](#references "Permalink to this headline")References
- [Joe Celko - SQL for Smarties: Advanced SQL Programming](http://www.amazon.com/exec/obidos/tg/detail/-/1558605762/ref=lib_rd_ss_TT04/102-7068143-3629730?v=glance&s=books&vi=reader&img=17#reader-link)
- [RDBMS Naming conventions](http://www.ss64.com/orasyntax/naming.html)

## [](#indentation "Permalink to this headline")Indentation
- Drupal does not have a standard method for indentation or formating of longer SQL queries on multiple lines. Some competing strategies include:
- `if (!(db_query(
- INSERT INTO {mlsp_media_file_type}
- SET extension   = '%s',
- attributes      = '%s'
- $file_type_entry['extension'],
- $selected_attributes
- $errors = TRUE;
- `$sql = "SELECT t.*, j1.col1, j2.col2"
- . " FROM {table} AS t"
- . " LEFT JOIN {join1} AS j1 ON j1.id = t.jid"
- . " LEFT JOIN {join2} AS j2 ON j2.id = t.jjid"
- . " WHERE t.col LIKE '%s'"
- . " ORDER BY %s"
- $result = db_query($sql, 'findme', 't.weight');`
- or, using the concept of "rivers" and HEREDOC syntax
- `$sql = <<`

## Help improve this page
- *Page status:** No known problems
- *You can:**
- Log in, click [Edit](/node/2497/edit), and edit this page
- Log in, click [Discuss](/node/2497/discuss), update the Page status value, and suggest an improvement
- Log in and [create a Documentation issue](/node/add/project-issue/documentation?title=Suggestion%20for%3A%20%282497%29%20SQL%20coding%20conventions) with your suggestion

## Requirements:

### Format & Structure:
1. **Use AGENTS.md format** - Create a section suitable for AGENTS.md
2. **Use bullet points** - Keep it scannable and concise
3. **Structure logically** - Group related guidelines together
4. **Use clear headers** - Make it easy to navigate

### Content Focus:
5. **Extract key conventions/rules** - Focus on the most important coding standards and conventions
6. **Be concise** - Avoid lengthy explanations, focus on actionable guidelines
7. **Prioritize AI-relevant content** - Rules that AI coding agents should follow and enforce
8. **Minimize token usage** - Use bullet points only, no examples or lengthy explanations

### AI Optimization:
9. **Make it actionable** - Each point should be something an AI can implement or enforce
10. **Use consistent formatting** - Standardize the format for easy parsing
11. **Focus on conventions** - Coding standards, naming conventions, best practices, rules
12. **Self-contained** - An agent reading only this section should understand the rules

### Output Format:
Generate an AGENTS.md section in this exact format:

## Sql Coding Conventions

### Rules
- [Essential rule/convention 1]
- [Essential rule/convention 2]
- [Essential rule/convention 3]

Keep the output concise and focused on the most important rules and conventions that AI coding agents need to know and enforce. Use only bullet points to minimize token usage and costs.